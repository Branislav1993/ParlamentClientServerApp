/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rs.fon.silab.gui.speech;

import java.awt.Color;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import rs.fon.silab.controllers.Controller;
import rs.fon.silab.gui.models.MemberTableModel;
import rs.fon.silab.gui.models.SessionsTableModel;
import rs.fon.silab.gui.models.SpeechTableModel;
import rs.silab.domain.Member;
import rs.silab.domain.PlenarySession;
import rs.silab.domain.Speech;

/**
 *
 * @author Baki
 */
public class AddSpeechForm extends javax.swing.JFrame {

    private SpeechesForm speechesForm;
    private Speech speech;

    public AddSpeechForm(SpeechesForm speechesForm) {
        this.speech = null;
        this.speechesForm = speechesForm;
        initComponents();
        fillMemberTable();
        fillSessionTable();
        btnUpdate.setEnabled(false);
        btnAdd.setEnabled(true);
    }

    public AddSpeechForm(SpeechesForm speechesForm, Speech speech) {
        this.speech = speech;
        this.speechesForm = speechesForm;
        initComponents();
        this.getContentPane().remove(jScrollPane4);
        fillMemberTable();
        fillSessionTable();
        fillFormWithSpeechData();
        btnUpdate.setEnabled(true);
        btnAdd.setEnabled(false);
        btnSaveAll.setEnabled(false);
    }

    public void fillMemberTable() {
        try {
            MemberTableModel model = new MemberTableModel(Controller.getInstance().getMembers());
            tableMembers.setModel(model);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Couldn't get members from server!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void fillSessionTable() {
        try {
            SessionsTableModel model = new SessionsTableModel(Controller.getInstance().getSessions());
            tableSessions.setModel(model);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Couldn't get sessions from server!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableMembers = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSessions = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        textAreaSpeech = new javax.swing.JTextArea();
        btnCancel = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableSpeechesToSave = new javax.swing.JTable();
        btnSaveAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Speech form");

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Member", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        tableMembers.setModel(new MemberTableModel(null));
        tableMembers.setFillsViewportHeight(true);
        tableMembers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tableMembers);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Session", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        tableSessions.setModel(new SessionsTableModel(null));
        tableSessions.setFillsViewportHeight(true);
        tableSessions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tableSessions);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "TEXT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        textAreaSpeech.setColumns(20);
        textAreaSpeech.setRows(5);
        jScrollPane3.setViewportView(textAreaSpeech);

        jPanel1.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Speeches to save"));

        tableSpeechesToSave.setModel(new SpeechTableModel(null));
        jScrollPane4.setViewportView(tableSpeechesToSave);

        btnSaveAll.setText("SAVE ALL");
        btnSaveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveAll)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnCancel, btnSaveAll, btnUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd)
                        .addComponent(btnCancel))
                    .addComponent(btnSaveAll))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, btnCancel, btnSaveAll, btnUpdate});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        boolean valid = validateForm();
        if (!valid) {
            JOptionPane.showMessageDialog(this, "Please fix errors!\n They are marked in red border.", "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            getSpeechDataAndSave();
            this.speechesForm.fillSpeechesTable();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAllActionPerformed
        SpeechTableModel model = (SpeechTableModel) tableSpeechesToSave.getModel();
        List<Speech> speeches = model.getSpeeches();
        if (speeches.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please first add speeches to save!", "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                Controller.getInstance().createSpeeches(speeches);
//                for (Speech s : speeches) {
//                    Controller.getInstance().createSpeech(s);
//                }
                this.speechesForm.fillSpeechesTable();
                tableSpeechesToSave.setModel(new SpeechTableModel(null));
                JOptionPane.showMessageDialog(this, "Successfully saved all speeches!", "Success!", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Something went wrong while saving speeches!", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnSaveAllActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        boolean valid = validateForm();
        if (!valid) {
            JOptionPane.showMessageDialog(this, "Please fix errors!\n They are marked in red border.", "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            getSpeechDataAndUpdate();
            this.speechesForm.fillSpeechesTable();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSaveAll;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tableMembers;
    private javax.swing.JTable tableSessions;
    private javax.swing.JTable tableSpeechesToSave;
    private javax.swing.JTextArea textAreaSpeech;
    // End of variables declaration//GEN-END:variables

    private boolean validateForm() {
        refreshBordersOnForm();
        boolean valid = true;
        if (textAreaSpeech.getText().isEmpty()) {
            textAreaSpeech.setBorder(BorderFactory.createLineBorder(Color.RED));
            valid = false;
        }
        int index1 = tableMembers.getSelectedRow();
        MemberTableModel model1 = (MemberTableModel) tableMembers.getModel();
        Member m = model1.getMemberByIndex(index1);
        if (m == null) {
            tableMembers.setBorder(BorderFactory.createLineBorder(Color.RED));
            valid = false;
        }
        int index2 = tableSessions.getSelectedRow();
        SessionsTableModel model2 = (SessionsTableModel) tableSessions.getModel();
        PlenarySession ps = model2.getSessionByIndex(index2);
        if (ps == null) {
            tableSessions.setBorder(BorderFactory.createLineBorder(Color.RED));
            valid = false;
        }
        return valid;
    }

    private void getSpeechDataAndSave() {
        Speech s = new Speech();

        s.setText(textAreaSpeech.getText());

        int index1 = tableMembers.getSelectedRow();
        MemberTableModel model1 = (MemberTableModel) tableMembers.getModel();
        Member m = model1.getMemberByIndex(index1);
        s.setMember(m);

        int index2 = tableSessions.getSelectedRow();
        SessionsTableModel model2 = (SessionsTableModel) tableSessions.getModel();
        PlenarySession ps = model2.getSessionByIndex(index2);
        s.setSession(ps);
        s.setSessionDate(ps.getDate());

        SpeechTableModel model = (SpeechTableModel) tableSpeechesToSave.getModel();
        model.addSpeech(s);
    }

    private void refreshBordersOnForm() {
        tableMembers.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        tableSessions.setBorder(BorderFactory.createLineBorder(Color.GRAY));
        textAreaSpeech.setBorder(BorderFactory.createLineBorder(Color.GRAY));
    }

    private void fillFormWithSpeechData() {
        textAreaSpeech.setText(this.speech.getText());
        MemberTableModel model1 = (MemberTableModel) tableMembers.getModel();
        int index1 = model1.getMembers().indexOf(speech.getMember());
        System.out.println(index1);
        tableMembers.setRowSelectionInterval(index1, index1);

        SessionsTableModel model2 = (SessionsTableModel) tableSessions.getModel();
        int index2 = model2.getSessions().indexOf(speech.getSession());
        System.out.println(index2);
        tableSessions.setRowSelectionInterval(index2, index2);
    }

    private void getSpeechDataAndUpdate() {

        this.speech.setText(textAreaSpeech.getText());

        int index1 = tableMembers.getSelectedRow();
        MemberTableModel model1 = (MemberTableModel) tableMembers.getModel();
        Member m = model1.getMemberByIndex(index1);
        this.speech.setMember(m);

        int index2 = tableSessions.getSelectedRow();
        SessionsTableModel model2 = (SessionsTableModel) tableSessions.getModel();
        PlenarySession ps = model2.getSessionByIndex(index2);
        this.speech.setSession(ps);
        this.speech.setSessionDate(ps.getDate());

        try {
            Controller.getInstance().updateSpeech(this.speech);
            this.speechesForm.fillSpeechesTable();
            JOptionPane.showMessageDialog(this, "Successfully updated speech!", "Success!", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Something went wrong while updating speech!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
}
